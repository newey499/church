<?php
/*
 * test_form.php
 *
 * @(#) $Header: /home/mlemos/cvsroot/forms/test_form.php,v 1.22 2004/07/14 08:32:45 mlemos Exp $
 *
 */

set_include_path(get_include_path() . PATH_SEPARATOR . 'php4classes');

?><html>
<head>
<title>Test for Manuel Lemos' PHP form class</title>
</head>
<body onload="PageLoad()" bgcolor="#cccccc">
<center><h1>Test for Manuel Lemos' PHP form class</h1></center>
<hr>
<?php

/*
 * Callback function for debugging form programming errors
 */
Function OutputDebug($error)
{
	echo "$error\n";
}

/*
 * Include form class code.
 */
	require("forms.php");

/*
 * Create a form object.
 */
	$form=new form_class;

/*
 * Define the name of the form to be used for example in Javascript validation
 * code generated by the class.
 */
	$form->NAME="subscription_form";

/*
 * Use the GET method if you want to see the submitted values in the form
 * processing URL, or POST otherwise.
 */
	$form->METHOD="POST";

/*
 * Make the form be displayed and also processed by this script.
 */
	$form->ACTION="";

/*
 * Specify a debug output function you really want to output any programming errors.
 */
	$form->debug="OutputDebug";

/*
 * Define a warning message to display by Javascript code when the user
 * attempts to submit the this form again from the same page.
 */
	$form->ResubmitConfirmMessage="Are you sure you want to submit this form again?";

/*
 * Output previously set password values
 */
	$form->OutputPasswordValues=1;

/*
 * Define the form field properties even if they may not be displayed.
 */
	$form->AddInput(array(
		"TYPE"=>"text",
		"NAME"=>"email_1",
		"ID"=>"email_1",
		"MAXLENGTH"=>50,
		"Capitalization"=>"lowercase",
		"ValidateAsEmail"=>1,
		"ValidationErrorMessage"=>"Not a valid e-mail address",
		"LABEL"=>"<u>E</u>-mail address",
		"ACCESSKEY"=>"E"
	));
	
	$form->AddInput(array(
		"TYPE"=>"text",
		"NAME"=>"email_2",
		"ID"=>"email_2",
		"MAXLENGTH"=>50,
		"Capitalization"=>"lowercase",
		"ValidateAsEmail"=>1,
		"ValidationErrorMessage"=>"Not a valid e-mail address",
		"LABEL"=>"<u>E</u>-mail address",
		"ACCESSKEY"=>"E"
	));	
	


	$form->AddInput(array(
		"TYPE"=>"submit",
		"ID"=>"button_subscribe",
		"VALUE"=>"Submit subscription",
		"ACCESSKEY"=>"u"
	));


/*
 * Give a name to hidden input field so you can tell whether the form is to
 * be outputted for the first or otherwise it was submitted by the user.
 */
	$form->AddInput(array(
		"TYPE"=>"hidden",
		"NAME"=>"form_submission",
		"VALUE"=>1
	));

/*
 * Hidden fields can be used to pass context values between form pages,
 * like for instance database record identifiers or other information
 * that may help your application form processing scripts determine
 * the context of the information being submitted with this form.
 *
 * You are encouraged to use the DiscardInvalidValues argument to help
 * preventing security exploits performed by attackers that may spoof
 * invalid values that could be used for instance in SQL injection attacks.
 *
 * In this example, any value that is not an integer is discarded. If the
 * value was meant to be used in a SQL query, with this attack prevention
 * measure an attacker cannot submit SQL code that could be used to make
 * your SQL query retrieve unauthorized information to abuse your system.
 */
	$form->AddInput(array(
		"TYPE"=>"hidden",
		"NAME"=>"user_track",
		"VALUE"=>"0",
		"ValidateAsInteger"=>1,
		"DiscardInvalidValues"=>1
	));

/*
 * Load form input values eventually from the submitted form.
 */
	$form->LoadInputValues($form->WasSubmitted("form_submission"));

/*
 * Empty the array that will list the values with invalid field after validation.
 */
	$verify=array();


	/*
 	* Check if the global array variable corresponding to hidden input field is
 	* defined, meaning that the form was submitted as opposed to being displayed
 	* for the first time.
 	*/
	if($form->WasSubmitted("form_submission"))
	{
		/*
 		* Therefore we need to validate the submitted form values.
 		*/
		if(($error_message=$form->Validate($verify))=="")
		{
			/*
		 	* It's valid, set the $validatedOK flag variable to 1 to tell the form is ready to
		 	* processed.
 			*/
			$validatedOK=1;
		}
		else
		{
			/*
 			* It's invalid, set the $validatedOK flag to 0 and encode the returned error message
 			* to escape any non-ASCII ISO-latin 1 characters and HTML special characters.
 			*/
			$validatedOK=0;
			$error_message=HtmlEntities($error_message);
		}
	}
	else
	{
		/*
 		* The form is being displayed for the first time, so it is not ready to be processed
 		* and there is no error message to display.
 		*/
		$error_message="";
		$validatedOK=0;
	}
  if($validatedOK)
  {
		/*
 		* The form is ready to be processed, just output it again as read only to
 		* display the submitted values.  A real form processing script usually may
 		* do something else like storing the form values in a database.
 		*/
  	$form->ReadOnly=1;
  	
  	print "<h1>Its valid - now saving</h1>";
  	
  }

/*
 * Compose the form output by including a HTML form template with PHP code
 * interleaaved with calls to insert form input field
 * parts in the layout HTML.
 */

	$form->StartLayoutCapture();
	$title="Form class test";
	$body_template="form_body.html.php";
	require("templates/form_frame.html.php");
 	$form->EndLayoutCapture();

	if($validatedOK)
	{

/*
 * If the form was submitted and was valid, make a Javascript function named
 * PageLoad be generated to be used by the page ONLOAD event to do nothing.
 */
		$form->AddFunction(array(
			"Function"=>"PageLoad",
			"Type"=>"void"
		));
	}
	else
	{

/*
 * Otherwise make the PageLoad function give the input focus to the first form
 * field or the first invalid field.
 */
		if(strlen($error_message))
		{
/*
 * If there is at least one field with invalid values,
 * get the name of the first field in error to make it get the input focus
 * when the page is loaded.
 */
			Reset($verify);
			$focus=Key($verify);
		}
		else
		{

/*
 * Make the email field get the input focus when the page is loaded
 * if there was no previous validation error.
 */
			$focus="email";
		}

		$form->AddFunction(array(
			"Function"=>"PageLoad",
			"Type"=>"focus",
			"Element"=>$focus
		));
	}

/*
 * Output the form using the function named Output.
 */
	$form->DisplayOutput();
?>
</body>
</html>
